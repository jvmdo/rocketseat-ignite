generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  reviews  Review[]
  shelves  Shelf[]

  @@map("users")
}

model Shelf {
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  book    Book   @relation(fields: [book_id], references: [id])
  book_id String

  @@id([user_id, book_id])
  @@map("shelves")
}

model Book {
  id          String   @id @default(uuid())
  name        String
  author      String
  summary     String   @db.Text
  cover_url   String
  total_pages Int
  created_at  DateTime @default(now())

  categories CategoriesOnBooks[]
  reviews    Review[]
  shelves    Shelf[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  book_id     String
  category_id String

  book     Book     @relation(fields: [book_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@id([book_id, category_id])
}

model Review {
  id          String   @id @default(uuid())
  rate        Float
  description String   @db.Text
  created_at  DateTime @default(now())

  book    Book   @relation(fields: [book_id], references: [id])
  book_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("reviews")
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
